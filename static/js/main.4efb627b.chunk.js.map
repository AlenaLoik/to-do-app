{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","toggleComplete","todoList","length","map","todo","react_default","a","createElement","className","key","id","type","value","style","textDecoration","complete","onClick","content","AddTodo","state","handleChange","e","_this","setState","target","handleSubmit","preventDefault","props","addTodo","alert","onSubmit","this","onChange","Component","App","todoToShow","filter","Date","now","concat","Object","toConsumableArray","objectSpread","updateTodoToShow","string","_this2","src_AddTodo","src_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4efb627b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Todos = ({todos, deleteTodo, toggleComplete}) => {\r\n    const todoList = todos.length ? (\r\n        todos.map(todo => {\r\n            return (\r\n                <div className=\"collection-item\" key={todo.id}>\r\n                    <div>\r\n                        <input \r\n                        type=\"submit\" \r\n                        value=\" \" \r\n                        style={{textDecoration: todo.complete ? \"line-through\" : \"\"}} \r\n                        onClick={() => {toggleComplete(todo.id)}}/>  \r\n                        <span style={{textDecoration: todo.complete ? \"line-through\" : \"\"}}>{todo.content}</span>\r\n                        <button className=\"remove-todo right\" onClick={() => {deleteTodo(todo.id)}}>X</button>\r\n                    </div> \r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <p className=\"center\">Nothing to do</p>\r\n    )\r\n    return (\r\n        <div className=\"todos collection\">\r\n           {todoList} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todos","import React, { Component } from 'react'\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        content: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.content.length > 0 && this.state.content[0] !== \" \") {\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            content: '',\r\n            complete: false\r\n        })} else {\r\n            alert (\"Plese add todo\")\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>What needs to bee done?</label>\r\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content} />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React, { Component } from 'react';\r\nimport Todos from './Todos'\r\nimport AddTodo from './AddTodo'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: [],\r\n    todoToShow: \"all\"\r\n  };\r\n\r\n  deleteTodo = (id) => {\r\n    const todos = this.state.todos.filter (todo => {\r\n      return todo.id !== id\r\n    });\r\n    this.setState({\r\n      todos\r\n    })\r\n  }\r\n\r\n \r\n\r\n  addTodo = (todo) => {\r\n    todo.id = Date.now();\r\n    let todos = [...this.state.todos, todo];\r\n    this.setState({\r\n      todos\r\n    })\r\n  }\r\n\r\n  toggleComplete = id => {\r\n    this.setState(state => ({\r\n      todos: state.todos.map(todo => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            complete: !todo.complete\r\n          };\r\n        } else {\r\n          return todo;\r\n        }\r\n      })\r\n    }));\r\n  };\r\n\r\n  updateTodoToShow = string => {\r\n    this.setState({\r\n      todoToShow: string\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let todos = [];\r\n\r\n    if (this.state.todoToShow === \"all\") {\r\n      todos = this.state.todos;\r\n    } else if (this.state.todoToShow === \"active\") {\r\n      todos = this.state.todos.filter(todo => !todo.complete);\r\n    } else if (this.state.todoToShow === \"complete\") {\r\n      todos = this.state.todos.filter(todo => todo.complete);\r\n    }\r\n\r\n    \r\n    return(\r\n      <div className=\"todo-app container\">\r\n        <h1 className=\"center pink-text\">TODOS</h1>\r\n        <AddTodo addTodo={this.addTodo} />\r\n        <Todos \r\n          todos={todos} \r\n          deleteTodo={this.deleteTodo}\r\n          toggleComplete={this.toggleComplete}/>\r\n            <div className=\"left-todo\">todos left: {this.state.todos.filter(todo => !todo.complete).length}</div>\r\n            <div className=\"botton-option-todo center\">\r\n              <button className=\"botton-all\" onClick={() => this.updateTodoToShow(\"all\")}>All </button>\r\n              <button className=\"botton-active\" onClick={() => this.updateTodoToShow(\"active\")}> Active </button>\r\n              <button className=\"botton-completed\" onClick={() => this.updateTodoToShow(\"complete\")}> Complete </button>\r\n            </div>\r\n     </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}